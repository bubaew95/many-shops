<?php

namespace common\models\categories;

use common\models\shops\Shops;
use common\models\shops\ShopsQuery;
use common\models\user\User;
use common\traits\HelperTrait;
use creocoder\nestedsets\NestedSetsBehavior;
use Yii;

/**
 * This is the model class for table "{{%menu}}".
 *
 * @property int $id
 * @property int $id_user ID клиента
 * @property int $lft Левая сторона
 * @property int $rgt Правая сторона
 * @property int $depth Глубина
 * @property int $shop_id Магазин
 * @property string $title Название
 *
 * @property User $user
 */
class Category extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%categories}}';
    }

    public function behaviors() {
        return [
            'tree' => [
                'class' => NestedSetsBehavior::className(),
                'treeAttribute' => 'tree',
                // 'leftAttribute' => 'lft',
                // 'rightAttribute' => 'rgt',
                // 'depthAttribute' => 'depth',
            ],
        ];
    }

    public function transactions()
    {
        return [
            self::SCENARIO_DEFAULT => self::OP_ALL,
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title', 'block'], 'required'],
            [['position'], 'default', 'value' => 0],
            [['tree', 'lft', 'rgt', 'depth', 'position' ], 'integer'],
            [['title'], 'string', 'max' => 255],
            [['icon'], 'string', 'max' => 50],
            [['alias'], 'safe'],
        ];
    }

    public function beforeSave($insert)
    {
        if($insert !== false) {
//            $shop_id = HelperTrait::get('shop_id');
//            if(!is_null($shop_id)) {
//                $this->shop_id = $shop_id;
//            }
            $this->alias = HelperTrait::titleTranslate($this->title);
            return parent::beforeSave($insert); // TODO: Change the autogenerated stub
        }
        return true;
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id'         => 'ID',
            'title'      => 'Название',
            'alias'      => 'Латинское название',
            'tree'       => Yii::t('app', 'Tree'),
            'lft'        => Yii::t('app', 'Lft'),
            'rgt'        => Yii::t('app', 'Rgt'),
            'depth'      => Yii::t('app', 'Depth'),
            'position'   => 'Сортировка',
            'block'      => 'Позиция',
            'icon'       => 'Иконка',
        ];
    }

    /**
     * Get parent's ID
     * @return \yii\db\ActiveQuery
     */
    public function getParentId()
    {
        $parent = $this->parent;
        return $parent ? $parent->id : null;
    }

    /**
     * Get parent's node
     * @return \yii\db\ActiveQuery
     */
    public function getParent()
    {
        return $this->parents(1)->one();
    }

    /**
     * Get parent's node
     * @return \yii\db\ActiveQuery
     */
    public function getParents()
    {
        return $this->parents(1)->all();
    }

    public static function getTreeObject()
    {
        $model = self::find()->asArray()->all();
        return $model;
    }

    /**
     * Get a full tree as a list, except the node and its children
     * @param  integer $node_id node's ID
     * @return array array of node
     */
    public static function getTree($node_id = 0)
    {
        // don't include children and the node
        $children = [];

        if ( ! empty($node_id))
            $children = array_merge(
                self::findOne($node_id)->children()->column(),
                [$node_id]
            );

        $model = self::find()->select('id, title, depth');
        $model->where(['NOT IN', 'id', $children]);

//        $shop_id = HelperTrait::get('shop_id');
//        if( !is_null($shop_id) ) {
//            $model->andWhere(['shop_id' => $shop_id]);
//        }
        $model->orderBy('tree, lft, position');
        $rows = $model->all();

        $return = [];
        foreach ($rows as $row)
            $return[$row->id] = str_repeat('-', $row->depth) . ' ' . $row->title;

        return $return;
    }

    /**
     * @param int $id
     */
    public static function getShopsTree($id = 0)
    {
        $rows = self::find()->where(['tree' => $id])->andWhere(['!=', 'depth', 0])->all();
        $return = [];
        foreach ($rows as $row){
            $return[$row->id] = str_repeat('-', $row->depth) . ' ' . $row->title;
        }
        return ($return);
    }

    /**
     * Gets query for [[Baskets]].
     *
     * @return \yii\db\ActiveQuery|ShopsQuery
     */
    public function getShop()
    {
        return $this->hasMany(Shops::class, ['category_id' => 'id']);
    }

    /**
     * Gets query for [[Baskets]].
     *
     * @return \yii\db\ActiveQuery|ShopsQuery
     */
    public function getCategoryToShop()
    {
        return $this->hasOne(CategoriesToShop::class, ['category_id' => 'id']);
    }

    /**
     * {@inheritdoc}
     * @return CategoriesQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new CategoriesQuery(get_called_class());
    }
}
