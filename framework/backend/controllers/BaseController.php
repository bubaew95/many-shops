<?php
namespace backend\controllers;

use common\components\Mailer;
use common\models\shops\Shops;
use common\traits\HelperTrait;
use Yii;
use yii\db\Exception;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\helpers\Html;
use yii\web\Controller;
use yii\web\HttpException;
use yii\web\NotFoundHttpException;
use yii\web\Response;

class BaseController extends Controller
{
    public $mailer;

    public function init()
    {
        parent::init();
        $this->mailer = new Mailer();
    }

    /**
     * @param \yii\base\Action $action
     * @return bool
     * @throws HttpException
     * @throws \yii\web\BadRequestHttpException
     */
    public function beforeAction($action)
    {
        $shopId = Yii::$app->request->get('shop_id');
        if($shopId && $action->controller->getRoute() != 'site/error') {
            $modelShops = $this->shopFindModel($shopId);
            $adminAccess = Yii::$app->user->can(ADMIN_ROLE);

            if( $modelShops === null ) {
                throw  new HttpException(403, 'У вас нет доступа к этому магазину');
            }

            if( !in_array($modelShops->active, [0, 1])) {
                if( !$adminAccess )
                    throw  new HttpException(404, 'Доступ к магазину заблокирован');

                Yii::$app->session->setFlash('danger', 'Магазин заблокирован');
            }

            Yii::$app->shopComponent->setShopInfo($modelShops);
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @param int $shopId
     * @return array|Shops|null
     */
    private function shopFindModel(int $shopId)
    {
        return Shops::find()
            ->where(['id' => $shopId])
            ->andWhere(['user_id' => HelperTrait::userId()])
            ->one();
    }

    /**
     * @return array|array[]
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'controllers' => ['site'],
                        'actions' => ['error', 'login', 'logout'],
                        'allow' => true,
                    ],
                    [
                        'allow' => true,
                        'roles' => [IS_VIEW_PANEL],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * @param null $url
     * @param int $statusCode
     * @return bool[]|Response
     */
    public function redirect($url = null, $statusCode = 302)
    {
        if(Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return [
                'status' => true
            ];
        }

        if(is_null($url)) {
            return $this->redirect(Yii::$app->request->referrer ?: Yii::$app->homeUrl);
        }

        return parent::redirect($url, $statusCode);
    }

    /**
     * @param $model
     * @return array|array[]
     */
    protected function fetchValidate($model)
    {
        $status = $model->isNewRecord;
        if ($model->save()) {
            return [ 'success' => true, 'status' => $status ];
        }
        $mErrors = [];
        $result  = [];
        foreach ($model->getErrors() as $attribute => $errors) {
            $result[Html::getInputId($model, $attribute)] = $errors;
            $mErrors[] = $errors;
        }
        return ['validation' => $result, 'errors' => $mErrors];
    }

    /**
     * @param $model
     * @param null $redirect
     * @return array|array[]|bool[]|Response|null
     */
    protected function save($model, $redirect = null)
    {
        if( Yii::$app->request->isAjax ) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return $this->fetchValidate($model);
        }

        return $model->save() ? $this->redirect($redirect) : null;
    }

    /**
     * @param $view
     * @param $models
     * @return string
     */
    protected function renderView($view, $models)
    {
        if( Yii::$app->request->isAjax ) {
            return $this->renderAjax($view, $models);
        }

        return $this->render($view, $models);
    }

    /**
     * @return bool
     * @throws NotFoundHttpException
     */
    public function actionImageDelete($shopId = '') : bool
    {
        $key = Yii::$app->request->post('key');
        if(!$key) return false;
        $path  = !empty($shopId) ? "{$shopId}/" : '';
        $model = $this->findModel($key);
        if( is_file('..' . UPLOADS . "/{$path}{$model->logo}") ) {
            unlink('..' . UPLOADS . "/thumbs/{$path}{$model->logo}");
            unlink('..' . UPLOADS . "/{$path}{$model->logo}");
            $model->logo = '';
            return $model->save();
        }
        return false;
    }

    /**
     * @param $key
     * @return array|mixed|null
     */
    protected function get($key)
    {
        return Yii::$app->request->get($key);
    }


}